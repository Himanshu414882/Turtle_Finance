import React, { useState, useEffect } from "react";
import axios from "axios";
import {
    useReactTable,
    getCoreRowModel,
    flexRender,
} from "@tanstack/react-table";
import Lottie from "lottie-react";
import parrot from "../assets/animation/parrot.json";
import "bootstrap/dist/css/bootstrap.min.css";
import styles from "../styles/AllClients.module.css"; 

const AllClients = () => {
    const [clients, setClients] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        fetchClients();
    }, []);

    const fetchClients = async () => {
        try {
            const res = await axios.get("http://localhost:8000/clients");
            setClients(res.data);
        } catch (err) {
            setError("Failed to fetch clients");
        } finally {
            setIsLoading(false);
        }
    };

    const columns = [
        { accessorKey: "fullName", header: "Full Name", enableResizing: true, size: 600 },
        { accessorKey: "salutation", header: "Salutation", enableResizing: true, size: 100 },
        { accessorKey: "leadSourceId", header: "Lead Source ID", enableResizing: true, size: 150 },
        { accessorKey: "leadSource", header: "Lead Source", enableResizing: true, size: 180 },
        { accessorKey: "subscriptionStatus", header: "Subscription Status", enableResizing: true, size: 200 },
        { accessorKey: "gender", header: "Gender", enableResizing: true, size: 100 },
        { accessorKey: "phone", header: "Phone", enableResizing: true, size: 150 },
        { accessorKey: "email", header: "Email", enableResizing: true, size: 250 },
        { accessorKey: "address", header: "Address", enableResizing: true, size: 300 },
        {
            accessorKey: "subscriptionDate",
            header: "Subscription Date",
            enableResizing: true,
            size: 150,
            cell: ({ row }) =>
                row.original.subscriptionDate
                    ? new Date(row.original.subscriptionDate).toLocaleDateString()
                    : "N/A",
        },
        { accessorKey: "onboardingStatus", header: "Onboarding Status", enableResizing: true, size: 180 },
        {
            accessorKey: "dob",
            header: "Date of Birth",
            enableResizing: true,
            size: 150,
            cell: ({ row }) =>
                row.original.dob ? new Date(row.original.dob).toLocaleDateString() : "N/A",
        },
        { accessorKey: "companyName", header: "Company Name", enableResizing: true, size: 250 },
    ];

    const table = useReactTable({
        data: clients,
        columns,
        getCoreRowModel: getCoreRowModel(),
        columnResizeMode: "onChange", // ✅ Enables column resizing
    });

    return (
        <div className="container mt-3">
            <h1 className="text-center">Clients</h1>

            {isLoading ? (
                <Lottie className="d-block mx-auto" animationData={parrot} />
            ) : error ? (
                <p className="text-danger text-center">{error}</p>
            ) : (
                <div className={styles.tableContainer}> {/* ✅ Enables scrolling */}
                    <table className="table table-bordered">
                        <thead>
                            {table.getHeaderGroups().map((headerGroup) => (
                                <tr key={headerGroup.id}>
                                    {headerGroup.headers.map((header) => (
                                        <th
                                            key={header.id}
                                            style={{
                                                position: "relative",
                                                width: `${header.column.getSize()}px`, // ✅ Ensures correct column width
                                            }}
                                        >
                                            {flexRender(header.column.columnDef.header, header.getContext())}

                                            {/* ✅ Resizer Div */}
                                            {header.column.getCanResize() && (
                                                <div
                                                    onMouseDown={header.getResizeHandler()}
                                                    onTouchStart={header.getResizeHandler()}
                                                    className={`${styles.resizer} ${
                                                        header.column.getIsResizing() ? styles.resizing : ""
                                                    }`}
                                                />
                                            )}
                                        </th>
                                    ))}
                                </tr>
                            ))}
                        </thead>
                        <tbody>
                            {table.getRowModel().rows.map((row) => (
                                <tr key={row.id}>
                                    {row.getVisibleCells().map((cell) => (
                                        <td key={cell.id} style={{ width: `${cell.column.getSize()}px` }}>
                                            {flexRender(cell.column.columnDef.cell, cell.getContext())}
                                        </td>
                                    ))}
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            )}
        </div>
    );
};

export default AllClients;
