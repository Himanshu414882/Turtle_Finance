import React, { useState, useEffect, Fragment } from "react";
import axios from "axios";
import { Link } from "react-router-dom";
import {
    useReactTable,
    getCoreRowModel,
    flexRender,
    getSortedRowModel,
    getPaginationRowModel
} from "@tanstack/react-table";
import Lottie from "lottie-react";
import parrot from "../../assets/animation/parrot.json";

import styles from "../..//styles/Clients/AllClients.module.css";
import SearchFilter from "../../components/SmallerComponents/SearchFilter";
import { FaSort, FaSortUp, FaSortDown, FaAngleDoubleLeft, FaAngleDoubleRight, FaEdit, FaTrash } from "react-icons/fa";

const AllClients = () => {
    const [clients, setClients] = useState([]);
    const [filteredClients, setFilteredClients] = useState([]); // ✅ New state for filtered data
    const [isLoading, setIsLoading] = useState(true);
    const [loadingId, setLoadingId] = useState(null);
    const [error, setError] = useState(null);
    const [columnFilter, setColumnFilter] = useState(""); // ✅ Search filter state
    const [pageSize, setPageSize] = useState(10); // ✅ Default page size


    useEffect(() => {
        fetchClients();
    }, []);



    const fetchClients = async () => {
        try {
            const res = await axios.get("http://localhost:8000/clients");
            setClients(res.data);
            setFilteredClients(res.data); // ✅ Initialize filtered data
        } catch (err) {
            setError("Failed to fetch clients");
        } finally {
            setIsLoading(false);
        }
    };

    const handleDelete = async (id) => {

        setLoadingId(id);
        try {
            
            await axios.delete(`http://localhost:8000/clients/${id}`)
            alert("Client has been deleted successfully");
            setClients((currClients) => currClients.filter((client) => client._id !== id));
        }
        catch (e) {
            console.log(e);
            alert("error deleting the client")
        }
        finally{
            setLoadingId(null);
        }
    }


    // ✅ Filter logic: Runs whenever columnFilter or clients change
    useEffect(() => {
        if (!columnFilter) {
            setFilteredClients(clients); // Reset when filter is empty
            return;
        }

        const lowerCaseFilter = columnFilter.toLowerCase();

        const filteredData = clients.filter((client) =>
            Object.values(client).some(
                (value) =>
                    value &&
                    value.toString().toLowerCase().includes(lowerCaseFilter)
            )
        );

        setFilteredClients(filteredData);
    }, [columnFilter, clients]);

    const columns = [
        { accessorKey: "fullName", header: "Full Name", enableResizing: true, size: 250, minSize: 150 },
        { accessorKey: "salutation", header: "Salutation", enableResizing: true, size: 100, minSize: 80 },
        { accessorKey: "leadSourceId", header: "Lead Source ID", enableResizing: true, size: 150, minSize: 120 },
        { accessorKey: "leadSource", header: "Lead Source", enableResizing: true, size: 180, minSize: 140 },
        { accessorKey: "subscriptionStatus", header: "Subscription Status", enableResizing: true, size: 200, minSize: 160 },
        { accessorKey: "gender", header: "Gender", enableResizing: true, size: 100, minSize: 80 },
        { accessorKey: "countryCode", header: "Country Code", enableResizing: true, size: 160, minSize: 130 },
        { accessorKey: "phone", header: "Phone", enableResizing: true, size: 160, minSize: 130 },
        { accessorKey: "email", header: "Email", enableResizing: true, size: 250, minSize: 200 },
        { accessorKey: "address", header: "Address", enableResizing: true, size: 300, minSize: 200 },
        {
            accessorKey: "subscriptionDate",
            header: "Subscription Date",
            enableResizing: true,
            size: 180,
            minSize: 140,
            cell: ({ row }) =>
                row.original.subscriptionDate
                    ? new Date(row.original.subscriptionDate).toLocaleDateString("en-GB")
                    : "N/A",
        },
        {
            accessorKey: "subscriptionDue",
            header: "Subscription Due",
            enableResizing: true,
            size: 180,
            minSize: 140,
            cell: ({ row }) =>
                row.original.subscriptionDue
                    ? new Date(row.original.subscriptionDue).toLocaleDateString("en-GB")
                    : "N/A",
        },
        {
            accessorKey: "riskProfileDate",
            header: "Risk Profile Date",
            enableResizing: true,
            size: 180,
            minSize: 140,
            cell: ({ row }) =>
                row.original.riskProfileDate
                    ? new Date(row.original.riskProfileDate).toLocaleDateString("en-GB")
                    : "N/A",
        },
        {
            accessorKey: "kickOffDate",
            header: "Kick Off Date",
            enableResizing: true,
            size: 180,
            minSize: 140,
            cell: ({ row }) =>
                row.original.kickOffDate
                    ? new Date(row.original.kickOffDate).toLocaleDateString("en-GB")
                    : "N/A",
        },
        { accessorKey: "onboardingStatus", header: "Onboarding Status", enableResizing: true, size: 200, minSize: 160 },
        {
            accessorKey: "dob",
            header: "Date of Birth",
            enableResizing: true,
            size: 180,
            minSize: 140,
            cell: ({ row }) =>
                row.original.dob ? new Date(row.original.dob).toLocaleDateString("en-GB") : "N/A",
        },
        { accessorKey: "companyName", header: "Company Name", enableResizing: true, size: 250, minSize: 200 },
        {
            accessorKey: "_id",
            header: "Action",
            enableResizing: false,
            size: 150,
            minSize: 120,
            cell: ({ row }) => (
                <div className="d-flex gap-2">
                    <Link to={`/clients/${row.original._id}/editClients`} className="btn btn-primary btn-sm">
                        <FaEdit />
                    </Link>
                    <button onClick={() => { handleDelete(row.original._id) }} disabled={loadingId === row.original._id} className="btn btn-danger btn-sm">
                        {loadingId === row.original._id ? "Deleting..." : <FaTrash />}
                    </button>
                </div>
            ),
        },
    ];


    const table = useReactTable({
        data: filteredClients,
        columns,
        getCoreRowModel: getCoreRowModel(),
        getSortedRowModel: getSortedRowModel(), // ✅ Added for sorting
        getPaginationRowModel: getPaginationRowModel(),
        columnResizeMode: "onChange",
        // manualPagination: false, 
        initialState: { pagination: { pageSize } },
    });


    return (
        <div className="container-fluid  ">
            <h2 className="text-start">Clients</h2>

            {isLoading ? (
                <Lottie className="d-block mx-auto w-25 h-25 top-0" animationData={parrot} />
            ) : error ? (
                <p className="text-danger text-center">{error}</p>
            ) : (
                <Fragment>

                    <div className="container-fluid p-0  ">

                        <div className="container-fluid p-0 mb-4 bg-primary">
                            <div className={`d-flex justify-content-evenly align-items-center ${styles.infoTabsContainer}`}>
                                <div className={styles.infoTabs}>
                                    <h2>6</h2>
                                    <p>Expired</p>
                                </div>
                                <hr className={styles.divider}></hr>
                                <div className={styles.infoTabs}>
                                    <h2>67</h2>
                                    <p>Active</p>
                                </div>
                                <hr className={styles.divider}></hr>
                                <div className={styles.infoTabs}>
                                    <h2>73</h2>
                                    <p>Clients</p>
                                </div>
                            </div>
                        </div>

                        <div className="">
                            {/* ✅ Search Filter Component */}
                            <SearchFilter columnFilter={columnFilter} setColumnFilter={setColumnFilter} />
                            <div className="table-responsive">
                                <table className="table table-bordered  table-hover ">
                                    <thead>
                                        {table.getHeaderGroups().map((headerGroup) => (
                                            <tr key={headerGroup.id}>
                                                {headerGroup.headers.map((header) => (
                                                    <th
                                                        key={header.id}
                                                        style={{
                                                            position: "relative",
                                                            width: `${header.column.getSize()}px`,
                                                            cursor: header.column.getCanSort() ? "pointer" : "default", // ✅ Add cursor pointer for sortable columns
                                                        }}

                                                    >
                                                        <span>
                                                            {flexRender(header.column.columnDef.header, header.getContext())}
                                                        </span>

                                                        {/* ✅ Sorting Icons */}
                                                        {header.column.getCanSort() && (
                                                            <span className="ms-2" onClick={header.column.getCanSort() ? header.column.getToggleSortingHandler() : undefined} >
                                                                {header.column.getIsSorted() === "asc" ? (
                                                                    <FaSortUp />
                                                                ) : header.column.getIsSorted() === "desc" ? (
                                                                    <FaSortDown />
                                                                ) : (
                                                                    <FaSort />
                                                                )}
                                                            </span>
                                                        )}

                                                        {/* ✅ Resizer (Keep it unchanged) */}
                                                        <div
                                                            onMouseDown={header.getResizeHandler()}
                                                            onTouchStart={header.getResizeHandler()}
                                                            className={`${styles.resizer} ${header.column.getIsResizing() ? styles.resizing : ""}`}
                                                        />
                                                    </th>
                                                ))}
                                            </tr>
                                        ))}
                                    </thead>


                                    <tbody>
                                        {table.getRowModel().rows.map((row) => (
                                            <tr key={row.id}>
                                                {row.getVisibleCells().map((cell) => (
                                                    <td key={cell.id} style={{ width: `${cell.column.getSize()}px` }}>
                                                        {flexRender(cell.column.columnDef.cell, cell.getContext())}
                                                    </td>
                                                ))}
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>

                            <div className="d-flex justify-content-between mt-2">
                                {/* ✅ Entries per page selection */}
                                <div>
                                    <label className="me-2">Showing</label>
                                    <select
                                        className="form-select d-inline-block w-auto"
                                        value={table.getState().pagination.pageSize}
                                        onChange={(e) => table.setPageSize(Number(e.target.value))}
                                    >
                                        {[5, 10, 15, 20].map((size) => (
                                            <option key={size} value={size}>
                                                {size}
                                            </option>
                                        ))}
                                    </select>
                                    <span className="ms-2">
                                        entries of {filteredClients.length} total rows
                                    </span>
                                </div>

                                <div className="">
                                    <ul className="pagination justify-content-center">
                                        <li className={`page-item ${!table.getCanPreviousPage() ? "disabled" : ""}`}>
                                            <button className="page-link" onClick={() => table.previousPage()} disabled={!table.getCanPreviousPage()}>
                                                <FaAngleDoubleLeft />
                                            </button>
                                        </li>

                                        {table.getPageOptions().map((page) => (
                                            <li key={page} className={`page-item ${table.getState().pagination.pageIndex === page ? "active" : ""}`}>
                                                <button className="page-link" onClick={() => table.setPageIndex(page)}>
                                                    {page + 1}
                                                </button>
                                            </li>
                                        ))}

                                        <li className={`page-item ${!table.getCanNextPage() ? "disabled" : ""}`}>
                                            <button className="page-link" onClick={() => table.nextPage()} disabled={!table.getCanNextPage()}>
                                                <FaAngleDoubleRight />
                                            </button>
                                        </li>
                                    </ul>
                                </div>
                            </div>

                        </div>



                        

                    </div>



                </Fragment>
            )}
        </div>
    );
};

export default AllClients;
